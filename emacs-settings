;; -*- mode: Emacs-Lisp -*-
;; -*- coding: utf-8 -*-

;; --------------------
;; set variables
;; --------------------
(setq *macosx* (eq system-type 'darwin))

;; --------------------
;; load-path
;; --------------------
(add-to-list 'load-path "~/.emacs.d/site-packages")
(add-to-list 'load-path "~/.emacs.d/color-themes")
(add-to-list 'load-path "~/.emacs.d/asenchi")

;; --------------------
;; requires
;; --------------------
(require 'cl)
(require 'yaml-mode)
;(require 'crontab-mode)
(require 'paredit)
(require 'arduino)

;; --------------------
;; color-theme
;; --------------------
(load "color-theme-github")
(color-theme-github)
;; default-font
(when (*macosx*)
  (set-face-font
   'default "-apple-inconsolata-medium-r-normal--14-0-72-72-m-0-iso10646-1"))

;; --------------------
;; setup
;; --------------------
(fset 'yes-or-no-p 'y-or-n-p)
(display-time)

;; --------------------
;; global key bindings
;; --------------------
(global-set-key "\C-s" 'isearch-forward-regexp)
(global-set-key "\C-r" 'isearch-backward-regexp)
(global-set-key "\C-\M-s" 'isearch-forward)
(global-set-key "\C-\M-r" 'isearch-backward)

;; --------------------
;; functions
;; --------------------
;; pretty auto-mode adder
(defun add-auto-mode (mode &rest patterns)
  (dolist (pattern patterns)
    (add-to-list 'auto-mode-alist (cons pattern mode))))

;; handle dates
(defun insert-date-long ()
  "Insert date at cursor."
  (interactive)
  (insert (format-time-string "%a %b %e, %Y %l:%M %p")))
(defun insert-date-short ()
  "Insert date at cursor."
  (interactive)
  (insert (format-time-string "%Y-%m-%d:%H:%M")))

;; handle file formats
(defun dos-unix ()                                       
  "Convert dos to unix endline characters."
  (interactive)
    (goto-char (point-min))
      (while (search-forward "\r" nil t) (replace-match "")))
(defun unix-dos ()
  "Convert unix to dos endline characters."
  (interactive)
    (goto-char (point-min))
      (while (search-forward "\n" nil t) (replace-match "\r\n")))

;; fullscreen
(defun toggle-fullscreen ()
  "Toggle full screen."
  (interactive)
  (set-frame-parameter nil 'fullscreen
		       (if (frame-parameter nil 'fullscreen)
			   nil
			 'fullboth)))

;; handle window splits
(defun split-window-horizontally-other ()
  "Split windows horizontally and move to the new one."
  (interactive)
  (split-window-horizontally)
  (other-window 1))
(defun split-window-vertically-other ()
  "Split windows vertically and move to the new one."
  (interactive)
  (split-window-vertically)
  (other-window 1))

;; auto compile our .emacs file
(defun autocompile-init nil
  "compile itself if ~/.emacs"
  (interactive)
  (require 'bytecomp)
  (if (string= (buffer-file-name)
	       (expand-file-name (concat default-directory "~/emacs")))
      (byte-compile-file (buffer-file-name))))
;; --------------------
;; auto-modes
;; --------------------
(add-auto-mode 'python-mode "python-mode" "\\.py$")
(add-auto-mode 'yaml-mode "\\.yml$")
(add-auto-mode 'crontab-mode "\\.?cron\\(tab\\)?\\'")

;; --------------------
;; custom settings
;; --------------------
(setq custom-file "~/.emacs.d/custom.el")
(load custom-file)
